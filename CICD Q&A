CICD:
=========================================================
Question: What is Continuous Integration, and why is it important?

Answer:
Continuous Integration (CI) is the practice of automatically integrating code changes from multiple developers into a shared repository several times a day. It involves automated builds and tests to ensure that new code doesnâ€™t break the application. CI reduces integration problems, allows for earlier detection of bugs, and speeds up development.
=========================================================
Question: How does Continuous Delivery differ from Continuous Deployment? 

Answer: Continuous Delivery (CD) automates the release process so that code changes can be deployed to production at any time with minimal effort, but the deployment is still a manual decision. Continuous Deployment takes it a step further by automatically deploying every change that passes all tests to production.
=========================================================
What is a CI/CD pipeline security best practice?

Answer: Security best practices include:

- Using secrets management tools (e.g., HashiCorp Vault, AWS Secrets Manager) for sensitive data.
- Scanning code and dependencies for vulnerabilities during the build process.
- Enforcing RBAC and least privilege access for build and deployment systems.
- Using secure artifact repositories to store build outputs.
=========================================================
Q: How do you ensure that your CI/CD pipeline is secure?
A:

- Use Secret Management Tools: Store sensitive information securely.
- Implement Access Controls: Limit who can trigger builds and deploy to production.
- Code Scanning: Integrate static and dynamic code analysis tools into the pipeline.
- Audit Logs: Maintain logs for all pipeline activities for auditing.
=========================================================
Q: Your CI/CD pipeline has started failing at the build stage. The error message mentions a missing dependency that was present before. How would you troubleshoot and resolve the issue?
A:

- Review the pipeline logs to identify the exact missing dependency and when it started failing.
- Check if there were recent changes to the build environment, such as updated dependencies, removed libraries, or changes to the build scripts.
- Ensure the build agent or Docker image used in the pipeline still has the correct environment or dependencies installed.
- If the issue is due to external dependency changes (e.g., a deprecated package), update the build script or lock dependencies to a specific version.
- Rollback the pipeline to a previous working state and apply fixes incrementally.
=========================================================
